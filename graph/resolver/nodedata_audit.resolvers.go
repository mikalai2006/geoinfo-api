package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.48

import (
	"context"
	"fmt"

	"github.com/mikalai2006/geoinfo-api/graph/generated"
	"github.com/mikalai2006/geoinfo-api/graph/model"
	"github.com/mikalai2006/geoinfo-api/internal/domain"
	"go.mongodb.org/mongo-driver/bson"
	"go.mongodb.org/mongo-driver/bson/primitive"
)

// ID is the resolver for the id field.
func (r *nodedataAuditResolver) ID(ctx context.Context, obj *model.NodedataAudit) (string, error) {
	return obj.ID.Hex(), nil
}

// UserID is the resolver for the userId field.
func (r *nodedataAuditResolver) UserID(ctx context.Context, obj *model.NodedataAudit) (string, error) {
	return obj.UserID.Hex(), nil
}

// NodedataID is the resolver for the nodedataId field.
func (r *nodedataAuditResolver) NodedataID(ctx context.Context, obj *model.NodedataAudit) (string, error) {
	return obj.NodedataID.Hex(), nil
}

// Value is the resolver for the value field.
func (r *nodedataAuditResolver) Value(ctx context.Context, obj *model.NodedataAudit) (any, error) {
	return obj.Value, nil
}

// Props is the resolver for the props field.
func (r *nodedataAuditResolver) Props(ctx context.Context, obj *model.NodedataAudit) (any, error) {
	return obj.Props, nil
}

// NodedataAudits is the resolver for the nodedataAudits field.
func (r *queryResolver) NodedataAudits(ctx context.Context, limit *int, skip *int, input *model.FetchNodedataAudit) (*model.PaginationNodedataAudit, error) {
	var results *model.PaginationNodedataAudit
	filter := bson.D{}
	if input.NodedataID != nil {
		NodedataIDPrimitive, err := primitive.ObjectIDFromHex(*input.NodedataID)
		if err != nil {
			return results, err
		}
		filter = append(filter, bson.E{"nodedata_id", NodedataIDPrimitive})
	}
	if input.UserID != nil {
		filter = append(filter, bson.E{"user_id", *input.UserID})
	}
	if input.Value != nil {
		filter = append(filter, bson.E{"value", *input.Value})
	}

	allItems, err := r.Repo.Nodedata.FindAudits(domain.RequestParams{
		Options: domain.Options{Limit: int64(*limit), Skip: int64(*skip)},
		Filter:  filter,
	})
	if err != nil {
		return results, err
	}
	// fmt.Println("allItems len=", len(allItems))

	if len(allItems.Data) == 0 {
		return results, nil
	}

	data := make([]*model.NodedataAudit, len(allItems.Data))
	for i, _ := range allItems.Data {

		data[i] = &allItems.Data[i]
	}
	// fmt.Println("Find total: ", len(data))
	total := 0
	results = &model.PaginationNodedataAudit{
		Total: &total,
		Data:  data,
		Limit: limit,
		Skip:  skip,
	}

	return results, nil
}

// NodedataAudit is the resolver for the nodedataAudit field.
func (r *queryResolver) NodedataAudit(ctx context.Context, id *string) (*model.NodedataAudit, error) {
	panic(fmt.Errorf("not implemented: NodedataAudit - nodedataAudit"))
}

// NodedataAudit returns generated.NodedataAuditResolver implementation.
func (r *Resolver) NodedataAudit() generated.NodedataAuditResolver { return &nodedataAuditResolver{r} }

type nodedataAuditResolver struct{ *Resolver }

// !!! WARNING !!!
// The code below was going to be deleted when updating resolvers. It has been copied here so you have
// one last chance to move it out of harms way if you want. There are two reasons this happens:
//   - When renaming or deleting a resolver the old code will be put in here. You can safely delete
//     it when you're done.
//   - You have helper methods in this file. Move them out to keep these resolver files clean.
func (r *nodedataAuditResolver) Owner(ctx context.Context, obj *model.NodedataAudit) (*model.User, error) {
	panic(fmt.Errorf("not implemented: Owner - owner"))
}
func (r *nodedataAuditResolver) User(ctx context.Context, obj *model.NodedataAudit) (*model.User, error) {
	panic(fmt.Errorf("not implemented: User - user"))
}
