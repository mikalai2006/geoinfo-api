# GraphQL schema example
#
# https://gqlgen.com/getting-started/
scalar JSON

type Node {
  id: ID!
  userId: String!
  lon: Float!
  lat: Float!
  type: String!
  name: String!
  data: [Nodedata]
  images: [Image]
  tagsData: [Tag]!
  osmId: String!
  amenityId: String!
  props: Any!
  user: User
  ccode: String!
  # f: String
  # p:String

  like: NodeLike
  reviews: [Review]
  address: Address
  reviewsInfo: ReviewInfo

  createdAt:Time!
  updatedAt:Time!
}

type NodeLike {
  like: Int
  dlike: Int
  ilike: Like
}

type PaginationNode {
  total: Int,
  limit: Int,
  skip: Int,
  data: [Node]
}
# type NodeEdge {
#   cursor: ID!
#   node: Node
# }

type PageInfo {
  startCursor: ID!
  endCursor: ID!
  hasNextPage: Boolean
}

# type NodesConnection {
#   edges: [NodeEdge!]!
#   pageInfo: PageInfo!
# }
input NodeFilterTagOption {
	tagId: String!
	value: [Any]
}
input NodeFilterTag {
  type: String!
  options: [NodeFilterTagOption]!
}

input ParamsNode {
  id: ID
  lonA:Float,
  latA:Float,
  lonB:Float,
  latB:Float,
  query:String,
  center: [Float],
  c: [String]
  # type:[String],
  # filter: JSON
  filter: [NodeFilterTag]
}

extend type Query {
  nodes(limit: Int, skip:Int=0, input: ParamsNode): PaginationNode
  osm(limit: Int, skip:Int=0, lonA:Float, latA:Float, lonB:Float, latB:Float): [Node]
  
  node(id: ID, osmId: String, lat: Float, lon: Float): Node
}

input NewNode {
  lat: Float!
  lon: Float!
  type: String!
  osmId: String!
}

extend type Mutation {
  createNode(input: NewNode!): Node! @auth
}